#!/usr/bin/env bash

# sysis - Display Key System Information
#
#     Lightweight Cross-Platform Utility for:
#         macOS, Linux, and Windows 10 wih Bash on Windows
#
#    from: https://github.com/robertpeteuil/sysis
#
#  Author: Robert Peteuil   @RobertPeteuil
#

scriptname="sysis"
scriptbuildnum="3.4.6.2"
scriptbuilddate="2017-03-30"

############################################################
### VARS INITS

OS=$(uname -s)
MACHINE_NAME=$(hostname -s)

# VARIABLES - OTHER
REPORTTITLE="System Information"
EXITSTATUS=0
EXITMESSAGE=""


############################################################
###     PRE-EXECUTION

# turn on color if possible
if test -t 1; then            # check if stdout is a terminal
    ncolors=$(tput colors)    # see if it supports colors
    if test -n "$ncolors" && test "$ncolors" -ge 8; then
      # Set Colors
        bold="$(tput bold)"
        red="$(tput setaf 1)"
        green="$(tput setaf 2)"
        yellow="$(tput setaf 3)"
        blue="$(tput setaf 4)"
        magenta="$(tput setaf 5)"
        cyan="$(tput setaf 6)"
        white="$(tput setaf 7)"

      # set color theme - allows for quickly changing all output
        CLRnormal="\033[0m"
        CLRwhite=${bold}${white}
        CLRheading=${bold}${blue}
        CLRheading2=${bold}${green}
        CLRtitle=${bold}${cyan}
        CLRtitle2=${bold}${magenta}
        CLRsuccess=${bold}${green}
        CLRwarning=${bold}${yellow}
        CLRerror=${bold}${red}
    fi
fi


######################################################################
#     FUNCTIONS
######################################################################

processExit () {    # error message can be sent to function when calling
  local var="$*"
  if [[ -n "$EXITMESSAGE" ]]; then
    echo -e "$EXITMESSAGE" >&2
  fi
  if [[ -n "$var" ]]; then                    # if error-text was passed
    echo -e "$var" >&2                        # display it on std-error
    [[ "$EXITSTATUS" == 0 ]] && EXITSTATUS=1  # set exit status to at least 1
  fi
  exit $EXITSTATUS
}

processAbort () {
  local var=$*
  [[ -n $var ]] && EXITMESSAGE="${CLRerror}ABORT${CLRwhite} - ${var}${CLRnormal}"
  EXITSTATUS=2
  processExit
}

display_ver() {
  echo -en "${CLRheading2}${scriptname}${CLRwhite}  ver ${CLRtitle}${scriptbuildnum} ${CLRwhite}- ${CLRtitle}${scriptbuilddate}${CLRwhite}${CLRnormal}"
}

printHelp() {
  display_ver
  echo -e "\n${CLRwhite}Collect and print information on system, network and OS to standard output.\n"
  echo -e "${CLRtitle}usage: ${CLRwhite}${scriptname} ${CLRtitle2}[OPTIONS] [DEBUG]${CLRwhite}\n"
  echo -e "${CLRtitle}   OPTIONS"
  echo -e "${CLRtitle2}     -d\t${CLRwhite}: debug only report"
  echo -e "${CLRtitle2}     -n\t${CLRwhite}: network only report"
  echo -e "${CLRtitle2}     -h\t${CLRwhite}: basic help"
  echo -e "${CLRtitle2}     -V\t${CLRwhite}: display version"
  echo -e "${CLRtitle2} --help\t${CLRwhite}: detailed help${CLRnormal}"
  if [[ "$1" ]]; then   # print all help
    echo
    echo -e "${CLRtitle}   DEBUG"
    echo -e "${CLRtitle2}--force\t${CLRwhite}: force report as 'unknown' type"
    echo
    echo -e "${CLRtitle}   EXIT STATUS"
    echo -e "${CLRtitle2}      0   ${CLRwhite}if OK,"
    echo -e "${CLRtitle2}      1   ${CLRwhite}if minor problems (e.g., cannot access subdirectory),"
    echo -e "${CLRtitle2}      2   ${CLRwhite}if serious trouble (e.g., cannot access command-line argument).${CLRnormal}"
  fi
  processExit
}

getCommandTail() {
  while [[ -n $1 ]]; do
    case $1 in
      -d)           mode="DEBUG";;
      -n)           mode="NET";;
      -h)           printHelp;;
      -V)           display_ver; echo; processExit;;
      --help)       printHelp FULL;;
      --force)      mode="FORCE";;
      *)            printHelp;;
    esac
    shift
  done
  return 0
}

cleanText() {
    local var=$*
    var="${var%"${var##*[![:space:]]}"}"  # remove leading whitespace
    var="${var#"${var%%[![:space:]]*}"}"  # remove trailing whitespace
    echo -n "$var"
}

getNetwork() {
  pubIP=$(curl -s ipinfo.io/ip)
  case $OS in
   Linux)  # note RPI only has awk 1.x installed
    if [[ $(ifconfig -a 2> /dev/null) ]]; then
      lanIP=$(ifconfig -a | awk '/(cast)/ {print $2}' | cut -d: -f2)
    fi
    ;;
   Darwin)  # filters virtual adapters as those with limited scope broadcast addys
    lanIP=$(ifconfig -a | awk '/(cast).([0-9]{1,3}\.){2}1\./ {print $2}') ;;
   FreeBSD|OpenBSD)
    lanIP=$(ifconfig  | grep -E 'inet.[0-9]' | grep -v '127.0.0.1' | awk '{print $2}') ;;
   SunOS)
    lanIP=$(ifconfig -a | grep inet | grep -v '127.0.0.1' | awk '{print $2}') ;;
   *)
    lanIP="Unknown" ;;
  esac
  if [[ -n $lanIP ]]; then
    count=0
    for i in $lanIP; do  # if multi-ip's put in array
      lanIPS[count]=$i
      ((++count))
    done
  fi
  return 0
}

getSystem() {
  if [[ $(uname 2> /dev/null) ]]; then
  	SYSnode=$(uname -n 2> /dev/null)
  	SYSkernal=$(uname -s 2> /dev/null)
  	SYSkernalVer=$(uname -r 2> /dev/null)
  	SYSmachine=$(uname -m 2> /dev/null)
  	SYSplatform=$(uname -i 2> /dev/null)
  else
    processExit "cannot execute ${CLRwarning}'uname'${CLRwhite}"
  fi
  if [[ $(dpkg --help 2> /dev/null) ]]; then
    PROCarch=$(dpkg --print-architecture) # on RPI2, and RPI-Zero = armhf
  fi
  if [[ $(lsb_release -h 2> /dev/null) ]]; then
    LSBset="TRUE"   # LSB AVAILABLE FLAG
    LSBidPRE=$(lsb_release -i 2> /dev/null)
    LSBdescrPRE=$(lsb_release -d 2> /dev/null)
    LSBrelPRE=$(lsb_release -r 2> /dev/null)
    LSBcodenamePRE=$(lsb_release -c 2> /dev/null)
    LSBallPRE=$(lsb_release -a 2> /dev/null)
    # Clean up text
  	[[ -n $LSBidPRE ]] && LSBid=${LSBidPRE#*":"} && LSBid=$(cleanText "$LSBid")
  	[[ -n $LSBdescrPRE ]] && LSBdescr=${LSBdescrPRE#*":"} && LSBdescr=$(cleanText "$LSBdescr")
  	[[ -n $LSBrelPRE ]] && LSBrel=${LSBrelPRE#*":"} && LSBrel=$(cleanText "$LSBrel")
  	[[ -n $LSBcodenamePRE ]] && LSBcodename=${LSBcodenamePRE#*":"} && LSBcodename=$(cleanText "$LSBcodename")
   	[[ -n $LSBallPRE ]] && LSBall=${LSBallPRE#*":"} && LSBall=$(cleanText "$LSBall")
  fi
  return 0
}

setLinuxCommon() {
  if [[ $LSBset == "TRUE" ]]; then
    OSfullname="${LSBid} ${SYSkernal} ${LSBrel}"
    OScodename="${LSBcodename}"
  else  # lsb_release not installed
    if [ -e "/etc/*release" ]; then  # set OS info from release doc if possible
      OSrelease=$(awk '/^VERSION_ID=/ {split($1, ary, /"/); print ary[2]}' /etc/*release)
      OSfullname="$(awk '/^ID=/ { print toupper(substr($name,4,1)) tolower(substr($name,5))}' /etc/*release) ${SYSkernal} ${OSrelease}"
      OScodename=$(awk '/^VERSION=/ {split($0, ary, /(\()||(\))/); print toupper(substr(ary[2],1,1)) tolower(substr(ary[2],2)) }' /etc/*release)
    else  # otherwise use the basic OS name from uname
      OSfullname="${SYSkernal}"
    fi
  fi
  if [ -e "/sys/devices/system/cpu/possible" ]; then
    CPUspeed=$(lscpu | grep -m1 'MHz')
      CPUspeed=${CPUspeed%.*}             # strip everythign right of '.'
      CPUspeed=${CPUspeed#*:}             # strip everything left of ':'
      CPUspeed=${CPUspeed// /}            # strip spaces
      CPUspeedBig=$((CPUspeed / 1000))    # main digit
      CPUspeedSmall=$((CPUspeed % 1000))  # sub digit
      CPUspeed="${CPUspeedBig}.${CPUspeedSmall:0:1} GHz"
    CPUcores=$(lscpu | grep 'Core(s)')
      CPUcores=${CPUcores#*:}             # strip left of ': '
      CPUcores=${CPUcores// /}            # strip spaces
  fi
  DISKusage=$(df -h | awk '$NF=="/"{printf "%d/%d GB (%s)\n", $3,$2,$5}')
  return 0
}

setRPI() {
  DeviceType="RPI"
  setLinuxCommon
  if [ -e "/proc/cpuinfo" ]; then
    RPIrev=$(awk '/Revision/ { sub(/^.+\:/, "") ; print $1 }' /proc/cpuinfo)
    CPUname=$(awk '/model\ name/ { sub(/-compatible/, ""); print ($4)" r"($7); exit}' /proc/cpuinfo)
    # info: http://elinux.org/RPi_HardwareHistory
    case "$RPIrev" in
        *beta) RPImodel="Beta"; RPImem="256 MB"; RPIman="Beta"; RPIrel="Q1 2012";;
        *002) RPImodel="B (1.0)"; RPImem="256 MB"; RPIman="unknown"; RPIrel="Q1 2012";;
        *003) RPImodel="B (1.0)"; RPImem="256 MB"; RPIman="ECN 001"; RPIrel="Q3 2012";;
        *004) RPImodel="B (2.0)"; RPImem="256 MB"; RPIman="Sony"; RPIrel="Q3 2012";;
        *005) RPImodel="B (2.0)"; RPImem="256 MB"; RPIman="Qisda"; RPIrel="Q4 2012";;
        *006) RPImodel="B (2.0)"; RPImem="256 MB"; RPIman="Egoman"; RPIrel="Q4 2012";;
        *007) RPImodel="A (2.0)"; RPImem="256 MB"; RPIman="Egoman"; RPIrel="Q1 2013";;
        *008) RPImodel="A (2.0)"; RPImem="256 MB"; RPIman="Sony"; RPIrel="Q1 2013";;
        *009) RPImodel="A (2.0)"; RPImem="256 MB"; RPIman="Qisda"; RPIrel="Q1 2013";;
        *00d) RPImodel="B (2.0)"; RPImem="512 MB"; RPIman="Egoman"; RPIrel="Q4 2012";;
        *00e) RPImodel="B (2.0)"; RPImem="512 MB"; RPIman="Sony"; RPIrel="Q4 2012";;
        *00f) RPImodel="B (2.0)"; RPImem="512 MB"; RPIman="Qisda"; RPIrel="Q4 2012";;
        *010) RPImodel="B+ (1.0)"; RPImem="512 MB"; RPIman="Sony"; RPIrel="Q3 2014";;
        *011) RPImodel="Compute Module"; RPImem="512 MB"; RPIman="Sony"; RPIrel="Q2 2014";;
        *012) RPImodel="A+ (1.0)"; RPImem="256 MB"; RPIman="Sony"; RPIrel="Q4 2014";;
        *013) RPImodel="B+ (1.2)"; RPImem="512 MB"; RPIman="Embest"; RPIrel="Q1 2015";;
        *014) RPImodel="Compute Module"; RPImem="512 MB"; RPIman="Sony"; RPIrel="Q1 2015";;
        *015) RPImodel="A+ (1.0)"; RPImem="256 MB"; RPIman="Sony"; RPIrel="Q1 2015";;
        *a01040) RPImodel="2B (1.0)"; RPImem="1 GB"; RPIman="Sony"; RPIrel="Unknown";;
        *a01041) RPImodel="2B (1.1)"; RPImem="1 GB"; RPIman="Sony"; RPIrel="Q1 2015";;
        *a21041) RPImodel="2B (1.1)"; RPImem="1 GB"; RPIman="Embest"; RPIrel="Q1 2015";;
        *a22042) RPImodel="2B (1.2)"; RPImem="1 GB"; RPIman="Embest"; RPIrel="Q3 2016";;
        *900021) RPImodel="A+ (1.1)"; RPImem="512 MB"; RPIman="Sony"; RPIrel="Q3 2016";;
        *900032) RPImodel="B+ (1.2)"; RPImem="512 MB"; RPIman="Sony"; RPIrel="Q2 2016";;
        *900092) RPImodel="Zero (1.2)"; RPImem="512 MB"; RPIman="Sony"; RPIrel="Q4 2015";;
        *900093) RPImodel="Zero (1.3)"; RPImem="512 MB"; RPIman="Embest"; RPIrel="Q4 2016";;
        *9000c1) RPImodel="Zero W (1.1)"; RPImem="512 MB"; RPIman="Sony"; RPIrel="Q1 2017";;
        *a02082) RPImodel="3B (1.2)"; RPImem="1 GB"; RPIman="Sony"; RPIrel="Q1 2016";;
        *a020a0) RPImodel="Compute Module 3"; RPImem="1 GB"; RPIman="Sony"; RPIrel="Q1 2017";;
        *a22082) RPImodel="3B (1.2)"; RPImem="1 GB"; RPIman="Embest"; RPIrel="Q1 2016";;
        *a32082) RPImodel="3B (1.2)"; RPImem="1 GB"; RPIman="Sony"; RPIrel="Q4 2016";;
        *) RPImodel="'Unknown Version'"; RPImem="Unknown"; RPIman="Unknown"; RPIrel="Unknown";;
    esac
  fi
  OSversion=${SYSkernalVer%"-"*}  #remove '-xxx' on right
  HWdevice="Raspberry Pi ${RPImodel}"
  HWrelease="${RPIrel} (${RPIman})"
  MEMsize="${RPImem}"
  MEMusage=$(free -m | awk 'NR==2{printf "%s/%s MB (%d%%)\n", $3,$2,$3*100/$2 }')
  return 0
}

setLinux() {
  DeviceType="Linux"
  setLinuxCommon
  OSversion=${SYSkernalVer%%"-"*}  #remove '-amd64' on right
  HWdevice=""   # UNKNOWN HW
  HWrelease=""  # UNKNOWN HW
  if [ -e "/proc/cpuinfo" ]; then
    CPUname=$(grep -m1 'model name' < /proc/cpuinfo)
    CPUname=${CPUname#*': '}  # strip everything left of ': '
    CPUname=${CPUname//'(R)'/}  # remove '(R)'
    CPUname=${CPUname//'(tm)'/}  # remove '(tm)'
    CPUname=${CPUname/' CPU'/}  # remove ' CPU'
    CPUname=${CPUname/' Processor'/}  # remove ' Processor'
    CPUname=${CPUname%' @'*}  # remove everything right of ' @', thus removing speed
    CPUname=$(cleanText "$CPUname")
  fi
  MEMsizeMB=$(free -m | awk '/^Mem:/{print $2}')
    MEMsize=$(( MEMsizeMB / 925 ))   # total system ram in GB
    MEMsize="${MEMsize} GB"
  MEMusage=$(free -m | awk 'NR==2{printf "%s/%s MB (%.0f%%)\n", $3,$2,$3*100/$2 }')
  return 0
}

setMac() {
  DeviceType="Mac"
  MacOSinitialVer=${SYSkernalVer%%.*}  # remove everything right of first '.'
  MacOSadjustedVer=$((MacOSinitialVer-4))   # subtract 4 from first number
  MacOSsubVer=${SYSkernalVer%.*}   # remove rightmost # - 14.5.0 to 14.5
  MacOSsubVer=${MacOSsubVer#*.}  # move leftmost # - 14.5 to 5
  MacOSmainVer="10.${MacOSadjustedVer}"
  OSversion="10.${MacOSadjustedVer}.${MacOSsubVer}"
  OSfullname="macOS ${MacOSmainVer}"
  case $MacOSmainVer in
    10.12) OScodename="Sierra";;
    10.11) OScodename="El Capitan";;
    10.10) OScodename="Yosemite";;
    10.9) OScodename="Mavericks";;
    10.8) OScodename="Mountain Lion";;
    10.7) OScodename="Lion";;
    10.6) OScodename="Snow Leopard";;
    10.5) OScodename="Leopard";;
    10.4) OScodename="Tiger";;
    10.3) OScodename="Panther";;
    10.2) OScodename="Jaguar";;
    10.1) OScodename="Puma";;
    10.0) OScodename="Cheetah";;
  esac
  HWdevice=${SYSplatform//,/.}
  HWrelease=""  # Unknown on Mac
  # Mac HW Quieries - 'sysctl -n' return value, 'sysctl -a | grep cpu'
  CPUname=$(sysctl -n machdep.cpu.brand_string)
    CPUname=${CPUname//(R)/}  # remove ALL occurences of '(R)'
    CPUname=${CPUname/" CPU"/}
    CPUname=${CPUname/"(TM)"/}
    CPUname=${CPUname%' @'*}  # remove speed
  CPUspeed=$(sysctl -n hw.cpufrequency_max) # get CPU speed
    CPUspeed=$((CPUspeed / 1000000))
    CPUspeedBig=$((CPUspeed / 1000))
    CPUspeedSmall=$((CPUspeed % 1000))
    CPUspeed="${CPUspeedBig}.${CPUspeedSmall:0:1} GHz"
  CPUcores=$(sysctl -n hw.ncpu)  # get CPU cores "hw.ncpu: 8"
  MEMsizeMB=$(sysctl -n hw.memsize)   # "hw.memsize: 34359738368"
    MEMadjust=$(( 1024 * 1024 ))
    MEMsizeMB=$((MEMsizeMB / MEMadjust))   # Mem Size in MB
    MEMsize="$((MEMsizeMB / 1024)) GB"  # Mem Size in GB
  MEMusedApps=$(vm_stat | grep 'active')
    MEMusedApps=${MEMusedApps#*':'}  # remove 'pages wired down:'
    MEMusedApps=${MEMusedApps%%'.'*}  # remove '.' at right side
    MEMusedApps=${MEMusedApps// /}   # remove all spaces
    MEMusedApps=$((MEMusedApps / 256))  # in MB - multiple # pages by 4096 bytes per pages
  MEMusedWired=$(vm_stat | grep 'wired')
    MEMusedWired=${MEMusedWired#*':'}  # remove 'pages wired down:'
    MEMusedWired=${MEMusedWired%'.'*}  # remove '.' at right side
    MEMusedWired=${MEMusedWired// /}   # remove all spaces
    MEMusedWired=$((MEMusedWired / 256))  # in MB - multiple # pages by 4096 bytes per pages
  MEMusedComp=$(vm_stat | grep 'occupied by compressor')
    MEMusedComp=${MEMusedComp#*':'}  # remove 'pages wired down:'
    MEMusedComp=${MEMusedComp%'.'*}  # remove '.' at right side
    MEMusedComp=${MEMusedComp// /}   # remove all spaces
    MEMusedComp=$((MEMusedComp / 256))  # in MB - multiple # pages by 4096 bytes per pages
  MEMused=$((MEMusedApps + MEMusedWired + MEMusedComp))
  MemRatio=$(( (MEMused * 100) / MEMsizeMB))
  printf -v MEMusage "%s/%s MB (%.0f%%)" ${MEMused} ${MEMsizeMB} ${MemRatio}
  DISKusage=$(df -h | awk '$NF=="/"{printf "%d/%d GB (%s)\n", $3,$2,$5}')
  return 0
}

printTitle () {
  display_ver
  echo -en "${CLRwhite}  -  ${REPORTTITLE}"
  case ${mode} in
    DEBUG) echo -en "  ${CLRheading2}(DEBUG)${CLRnormal}";;
    FORCE) echo -en "  ${CLRheading2}(FORCED 'UNKNOWN')${CLRnormal}";;
    NET)   echo -en "  ${CLRheading}(NETWORK)${CLRnormal}";;
    *)     ;;
  esac
  echo -e "\n"
  return 0
}

reportDebug() {
  printTitle
  echo -e "\t${CLRheading}BASH VARS"
  echo -e "\t${CLRtitle}HOST = \t\t${CLRwhite}${MACHINE_NAME}"
  echo -e "\t${CLRtitle}OS = \t\t${CLRwhite}${OS}"
  echo -e "\t${CLRtitle}OS-TYPE =\t${CLRwhite}${OSTYPE}${CLRnormal}\n"
  echo -e "\t${CLRheading}UNAME${CLRwhite}"
  echo -e "\t${CLRtitle}SYSkernal = \t${CLRwhite}${SYSkernal}"
  echo -e "\t${CLRtitle}SYSkernalVer = \t${CLRwhite}${SYSkernalVer}"
  echo -e "\t${CLRtitle}SYSmachine = \t${CLRwhite}${SYSmachine}"
  echo -e "\t${CLRtitle}SYSplatform = \t${CLRwhite}${SYSplatform}\n"
  if [[ "$LSBset" == "TRUE" ]]; then   # only print if LSB installed
    echo -e "\t${CLRheading}LSB_RELEASE${CLRwhite}"
    echo -e "\t${CLRtitle}LSBdescr = \t${CLRwhite}${LSBdescr}"
    echo -e "\t${CLRtitle}LSBid = \t${CLRwhite}${LSBid}"
    echo -e "\t${CLRtitle}LSBrel = \t${CLRwhite}${LSBrel}"
    echo -e "\t${CLRtitle}LSBcodename = \t${CLRwhite}${LSBcodename}${CLRnormal}\n"
  fi
  if [[ "$DeviceType" == "RPI" ]]; then
    echo -e "\t${CLRheading}RPI VARS"
    echo -e "\t${CLRtitle}RPi HW Rev =\t${CLRwhite}${RPIrev}"
    echo -e "\t${CLRtitle}RPi Model =\t${CLRwhite}${RPImodel}"
    echo -e "\t${CLRtitle}RPi Rel Date =\t${CLRwhite}${RPIrel}"
    echo -e "\t${CLRtitle}RPi Manuf =\t${CLRwhite}${RPIman}${CLRnormal}\n"
  elif [[ "$DeviceType" == "Mac" ]]; then
    echo -e "\t${CLRheading}MacOS VARS"
    echo -e "\t${CLRtitle}Raw Version = \t${CLRwhite}${MacOSinitialVer}"
    echo -e "\t${CLRtitle}Adj Version = \t${CLRwhite}${MacOSadjustedVer}"
    echo -e "\t${CLRtitle}MacOS Ver = \t${CLRwhite}${MacOSmainVer}"
    echo -e "\t${CLRtitle}MacOS sub V = \t${CLRwhite}${MacOSsubVer}${CLRnormal}\n"
  fi
  return 0
}

reportNetwork() {
  printTitle
  echo -e "\t${CLRheading}HOST\t\t${CLRheading2}${MACHINE_NAME}"
  [[ -n $SYSnode ]] && [[ "$SYSnode" != "$HOSTNAME" ]] && echo -e "\t${CLRheading}NODE\t\t${CLRheading2}${SYSnode}"
  if [[ $lanIP != "Unknown" ]]; then
    for (( i=0; i<count; i=i+1 )); do
      lanIP=${lanIPS[i]}
      echo -e "\t${CLRtitle}LAN IP \t\t${CLRwhite}${lanIP}"
    done
  fi
  [[ -n $pubIP ]] && echo -e "\t${CLRtitle}Internet IP \t${CLRwhite}${pubIP}${CLRnormal}\n"
  return 0
}

reportSystem() {
  echo -e "\t${CLRheading}OS\t\t${CLRheading2}${OSfullname}"
  [[ -n $OScodename ]] && echo -e "\t${CLRtitle}CODENAME\t${CLRwhite}${OScodename}"
  [[ -n $OSversion ]] && echo -e "\t${CLRtitle}OS VERSION\t${CLRwhite}${OSversion}"
  echo -e "\n\t${CLRheading}DEVICE\t\t${CLRheading2}${HWdevice}"
  [[ -n $HWrelease ]] && echo -e "\t${CLRtitle}RELEASE DATE\t${CLRwhite}${HWrelease}"
  [[ -n $CPUname ]] && echo -e "\t${CLRtitle}PROCESSOR\t${CLRwhite}${CPUname}"
  [[ -n $CPUspeed ]] && echo -e "\t${CLRtitle}CPU SPEED\t${CLRwhite}${CPUspeed}"
  [[ -n $CPUcores ]] && echo -e "\t${CLRtitle}CPU CORES\t${CLRwhite}${CPUcores}"
  [[ -n $MEMsize ]] && echo -e "\t${CLRtitle}MEMORY\t\t${CLRwhite}${MEMsize}"
  [[ -n $MEMusage ]] && echo -e "\t${CLRtitle}MEM USAGE\t${CLRwhite}${MEMusage}"
  [[ -n $DISKusage ]] && echo -e "\t${CLRtitle}DISK USAGE\t${CLRwhite}${DISKusage}$CLRnormal"
  echo
  return 0
}

reportMain() {
  reportNetwork
  if [[ -z "$DeviceType" ]] || [[ "$mode" == "FORCE" ]]; then
    # unknown device OR forced
    OSversion=${SYSkernalVer}  # set VARS to raw data
    CPUname=${SYSmachine}
    [[ "$SYSplatform" != "unknown" ]] && HWdevice=${SYSplatform}  # Don't set if 'unknown'
  fi
  reportSystem
  return 0
}


######################################################################
#     EXECUTION STARTS HERE
######################################################################

getCommandTail "$@"

getNetwork
[[ $mode == "NET" ]] && reportNetwork && processExit
getSystem

if [[ "$OS" == "Linux" ]]; then
  if ([[ "$PROCarch" == "armhf" ]] || [[ $SYSmachine == armv* ]] || [[ "$OSTYPE" == "linux-gnueabihf" ]]); then
    setRPI
  else
    setLinux
  fi
elif [[ "$OS" == "Darwin" ]]; then
  setMac
else  # Unknown device
  processExit "${CLRerror}Error${CLRwhite}: ${CLRwarning}Could not determine System Type${CLRwhite}"
fi

[[ "$mode" == "DEBUG" ]] && reportDebug && processExit
reportMain

processExit

### SHOULD NEVER RUN CODE BELOW THIS LINE
echo "ERROR - exit function didnt work" >&2
exit 2
