#!/usr/bin/env bash

# sysis - Display Key System Information
#
#     Lightweight Cross-Platform Utility for:
#         macOS, Linux, and Windows 10 wih Bash on Windows
#
#    from: https://github.com/robertpeteuil/sysis
#
#  Author: Robert Peteuil   @RobertPeteuil
#

scriptname="sysis"
scriptbuildnum="3.4.7.4"
scriptbuilddate="2017-04-09"

############################################################
### VARS INITS

OS=$(uname -s)
MACHINE_NAME=$(hostname -s)

# VARIABLES - OTHER
REPORTTITLE="System Information"
EXITSTATUS=0
EXITMESSAGE=""


############################################################
###     PRE-EXECUTION

# turn on color if possible
if test -t 1; then            # check if stdout is a terminal
    ncolors=$(tput colors)    # see if it supports colors
    if test -n "$ncolors" && test "$ncolors" -ge 8; then
      # Set Colors
        bold="$(tput bold)"
        red="$(tput setaf 1)"
        green="$(tput setaf 2)"
        yellow="$(tput setaf 3)"
        blue="$(tput setaf 4)"
        magenta="$(tput setaf 5)"
        cyan="$(tput setaf 6)"
        white="$(tput setaf 7)"
      # set color theme vars to allow for quick changing
        CLRnormal="\033[0m"
        CLRwhite=${bold}${white}
        CLRheading=${bold}${blue}
        CLRheading2=${bold}${green}
        CLRtitle=${bold}${cyan}
        CLRtitle2=${bold}${magenta}
        CLRsuccess=${bold}${green}
        CLRwarning=${bold}${yellow}
        CLRerror=${bold}${red}
    fi
fi


######################################################################
#     FUNCTIONS
######################################################################

processExit () {    # error message can be sent to function when calling
  local var="$*"
  if [[ -n "$EXITMESSAGE" ]]; then
    echo -e "$EXITMESSAGE" >&2
  fi
  if [[ -n "$var" ]]; then                    # if error-text was passed
    echo -e "$var" >&2                        #   display it on std-error
    [[ "$EXITSTATUS" == 0 ]] && EXITSTATUS=1  #   set exit-status to at least 1
  fi
  exit $EXITSTATUS
}

processAbort () {
  local var=$*
  [[ -n $var ]] && EXITMESSAGE="${CLRerror}ABORT${CLRwhite} - ${var}${CLRnormal}"
  EXITSTATUS=2
  processExit
}

display_ver() {
  echo -en "${CLRheading2}${scriptname}${CLRwhite}  ver ${CLRtitle}${scriptbuildnum} ${CLRwhite}- ${CLRtitle}${scriptbuilddate}${CLRwhite}${CLRnormal}"
}

printHelp() {
  display_ver
  echo -e "\n${CLRwhite}Collect and print information on system, network and OS to standard output.\n"
  echo -e "${CLRtitle}usage: ${CLRwhite}${scriptname} ${CLRtitle2}[OPTIONS] [DEBUG]${CLRwhite}\n"
  echo -e "${CLRtitle}   OPTIONS"
  echo -e "${CLRtitle2}     -d\t${CLRwhite}: debug only report"
  echo -e "${CLRtitle2}     -n\t${CLRwhite}: network only report"
  echo -e "${CLRtitle2}     -h\t${CLRwhite}: basic help"
  echo -e "${CLRtitle2}     -V\t${CLRwhite}: display version"
  echo -e "${CLRtitle2} --help\t${CLRwhite}: detailed help${CLRnormal}"
  if [[ "$1" ]]; then
    echo
    echo -e "${CLRtitle}   DEBUG"
    echo -e "${CLRtitle2}--force\t${CLRwhite}: force report as 'unknown' type"
    echo
    echo -e "${CLRtitle}   EXIT STATUS"
    echo -e "${CLRtitle2}      0   ${CLRwhite}if OK,"
    echo -e "${CLRtitle2}      1   ${CLRwhite}if minor problems (e.g., cannot access subdirectory),"
    echo -e "${CLRtitle2}      2   ${CLRwhite}if serious trouble (e.g., cannot access command-line argument).${CLRnormal}"
  fi
  processExit
}

getCommandTail() {
  while [[ -n $1 ]]; do
    case $1 in
      -d)           mode="DEBUG";;
      -n)           mode="NET";;
      -h)           printHelp;;
      -V)           display_ver; echo; processExit;;
      --help)       printHelp FULL;;
      --force)      mode="FORCE";;
      *)            printHelp;;
    esac
    shift
  done
  return 0
}

cleanText() {
    local var=$*
    var="${var%"${var##*[![:space:]]}"}"  # remove leading whitespace
    var="${var#"${var%%[![:space:]]*}"}"  # remove trailing whitespace
    echo -n "$var"
}

cleanCPUname() {
  local tempCPUname=$1
  tempCPUname=${tempCPUname#*': '}          # strip left of ': '
  tempCPUname=${tempCPUname//'(R)'/}        # remove '(R)'
  tempCPUname=${tempCPUname//'(tm)'/}       # remove '(tm)'
  tempCPUname=${tempCPUname/'(TM)'/}        # remove '(TM)'
  tempCPUname=${tempCPUname/' CPU'/}        # remove ' CPU'
  tempCPUname=${tempCPUname/' Processor'/}  # remove ' Processor'
  tempCPUname=${tempCPUname%' @'*}          # remove speed
  tempCPUname=$(cleanText "$tempCPUname")   # remove leading / trailine space
  echo -n "$tempCPUname"
}

cleanVARtext() {
  local unclearVARtext=$1
  unclearVARtext=${unclearVARtext#*':'}     # strip left of ':'
  unclearVARtext=${unclearVARtext%%'.'*}    # strip right of '.'
  unclearVARtext=${unclearVARtext// /}      # remove spaces
  echo -n "$unclearVARtext"
}

getNetwork() {
  # fetch Internet IP
  pubIP=$(curl -s ipinfo.io/ip)
  # fetch LANIP if 'ifconfig' can be executed
  if [[ $(ifconfig -a 2> /dev/null) ]]; then
    case $OS in
     Linux)  # note RPI only has awk 1.x installed
        lanIP=$(ifconfig -a | awk '/(cast)/ {print $2}' | cut -d: -f2)
        ;;
     Darwin)  # filters virtual adapters (those with limited scope broadcast)
        lanIP=$(ifconfig -a | awk '/(cast).([0-9]{1,3}\.){2}1\./ {print $2}')
        ;;
     FreeBSD|OpenBSD)
        lanIP=$(ifconfig  | grep -E 'inet.[0-9]' | grep -v '127.0.0.1' | awk '{print $2}')
        ;;
     SunOS)
        lanIP=$(ifconfig -a | grep inet | grep -v '127.0.0.1' | awk '{print $2}')
        ;;
     *)
        lanIP="Unknown"
        ;;
    esac
  fi
  # if multi LanIPs put in array
  if [[ -n $lanIP ]]; then
    count=0
    for i in $lanIP; do
      lanIPS[count]=$i
      ((++count))
    done
  fi
  return 0
}

getSystem() {
  if [[ $(uname 2> /dev/null) ]]; then
  	SYSnode=$(uname -n 2> /dev/null)
  	SYSkernal=$(uname -s 2> /dev/null)
  	SYSkernalVer=$(uname -r 2> /dev/null)
  	SYSmachine=$(uname -m 2> /dev/null)
  	SYSplatform=$(uname -i 2> /dev/null)
  else
    processExit "cannot execute ${CLRwarning}'uname'${CLRwhite}"
  fi
  if [[ $(dpkg --help 2> /dev/null) ]]; then
    PROCarch=$(dpkg --print-architecture)
  fi
  if [[ $(lsb_release -h 2> /dev/null) ]]; then
    LSBset="TRUE"
    LSBidPRE=$(lsb_release -i 2> /dev/null)
    LSBdescrPRE=$(lsb_release -d 2> /dev/null)
    LSBrelPRE=$(lsb_release -r 2> /dev/null)
    LSBcodenamePRE=$(lsb_release -c 2> /dev/null)
    LSBallPRE=$(lsb_release -a 2> /dev/null)
  	[[ -n $LSBidPRE ]] && LSBid=${LSBidPRE#*":"} && LSBid=$(cleanText "$LSBid")
  	[[ -n $LSBdescrPRE ]] && LSBdescr=${LSBdescrPRE#*":"} && LSBdescr=$(cleanText "$LSBdescr")
  	[[ -n $LSBrelPRE ]] && LSBrel=${LSBrelPRE#*":"} && LSBrel=$(cleanText "$LSBrel")
  	[[ -n $LSBcodenamePRE ]] && LSBcodename=${LSBcodenamePRE#*":"} && LSBcodename=$(cleanText "$LSBcodename")
   	[[ -n $LSBallPRE ]] && LSBall=${LSBallPRE#*":"} && LSBall=$(cleanText "$LSBall")
  fi
  return 0
}

setLinuxCommon() {
  if [[ $LSBset == "TRUE" ]]; then  # use vals from lsb_release if possible
    OSfullname="${LSBid} ${SYSkernal} ${LSBrel}"
    OScodename="${LSBcodename}"
  else                              # plan b - get vals from release doc
    if [ -e "/etc/*release" ]; then
      OSrelease=$(awk '/^VERSION_ID=/ {split($1, ary, /"/); print ary[2]}' /etc/*release)
      OSfullname="$(awk '/^ID=/ { print toupper(substr($name,4,1)) tolower(substr($name,5))}' /etc/*release) ${SYSkernal} ${OSrelease}"
      OScodename=$(awk '/^VERSION=/ {split($0, ary, /(\()||(\))/); print toupper(substr(ary[2],1,1)) tolower(substr(ary[2],2)) }' /etc/*release)
    else                            # plan c - get OS name from uname
      OSfullname="${SYSkernal}"
    fi
  fi
  if [ -e "/sys/devices/system/cpu/possible" ]; then
    CPUspeed=$(lscpu | grep -m1 'MHz')
      CPUspeed=$(cleanVARtext "$CPUspeed")
      CPUspeedBig=$((CPUspeed / 1000))
      CPUspeedSmall=$((CPUspeed % 1000))
      CPUspeed="${CPUspeedBig}.${CPUspeedSmall:0:1} GHz"
    CPUcores=$(lscpu | grep 'Core(s)')
      CPUcores=$(cleanVARtext "$CPUcores")
  fi
  if [[ $(df 2> /dev/null) ]]; then
    DISKusage=$(df -h | awk '$NF=="/"{printf "%d/%d GB (%s)\n", $3,$2,$5}')
  fi
  return 0
}

setRPI() {
  DeviceType="RPI"
  setLinuxCommon
  if [ -e "/proc/cpuinfo" ]; then
    RPIrev=$(awk '/Revision/ { sub(/^.+\:/, "") ; print $1 }' /proc/cpuinfo)
    CPUname=$(awk '/model\ name/ { sub(/-compatible/, ""); print ($4)" r"($7); exit}' /proc/cpuinfo)
    # RPI HW version source: http://elinux.org/RPi_HardwareHistory
    case "$RPIrev" in
        *beta) RPImodel="Beta"; RPIman="Beta"; RPIrel="Q1 2012";;
        *002) RPImodel="B (1.0)"; RPIman="unknown"; RPIrel="Q1 2012";;
        *003) RPImodel="B (1.0)"; RPIman="ECN 001"; RPIrel="Q3 2012";;
        *004) RPImodel="B (2.0)"; RPIman="Sony"; RPIrel="Q3 2012";;
        *005) RPImodel="B (2.0)"; RPIman="Qisda"; RPIrel="Q4 2012";;
        *006) RPImodel="B (2.0)"; RPIman="Egoman"; RPIrel="Q4 2012";;
        *007) RPImodel="A (2.0)"; RPIman="Egoman"; RPIrel="Q1 2013";;
        *008) RPImodel="A (2.0)"; RPIman="Sony"; RPIrel="Q1 2013";;
        *009) RPImodel="A (2.0)"; RPIman="Qisda"; RPIrel="Q1 2013";;
        *00d) RPImodel="B (2.0)"; RPIman="Egoman"; RPIrel="Q4 2012";;
        *00e) RPImodel="B (2.0)"; RPIman="Sony"; RPIrel="Q4 2012";;
        *00f) RPImodel="B (2.0)"; RPIman="Qisda"; RPIrel="Q4 2012";;
        *010) RPImodel="B+ (1.0)"; RPIman="Sony"; RPIrel="Q3 2014";;
        *011) RPImodel="Compute Module"; RPIman="Sony"; RPIrel="Q2 2014";;
        *012) RPImodel="A+ (1.0)"; RPIman="Sony"; RPIrel="Q4 2014";;
        *013) RPImodel="B+ (1.2)"; RPIman="Embest"; RPIrel="Q1 2015";;
        *014) RPImodel="Compute Module"; RPIman="Sony"; RPIrel="Q1 2015";;
        *015) RPImodel="A+ (1.0)"; RPIman="Sony"; RPIrel="Q1 2015";;
        *a01040) RPImodel="2B (1.0)"; RPIman="Sony"; RPIrel="Unknown";;
        *a01041) RPImodel="2B (1.1)"; RPIman="Sony"; RPIrel="Q1 2015";;
        *a21041) RPImodel="2B (1.1)"; RPIman="Embest"; RPIrel="Q1 2015";;
        *a22042) RPImodel="2B (1.2)"; RPIman="Embest"; RPIrel="Q3 2016";;
        *900021) RPImodel="A+ (1.1)"; RPIman="Sony"; RPIrel="Q3 2016";;
        *900032) RPImodel="B+ (1.2)"; RPIman="Sony"; RPIrel="Q2 2016";;
        *900092) RPImodel="Zero (1.2)"; RPIman="Sony"; RPIrel="Q4 2015";;
        *900093) RPImodel="Zero (1.3)"; RPIman="Embest"; RPIrel="Q4 2016";;
        *9000c1) RPImodel="Zero W (1.1)"; RPIman="Sony"; RPIrel="Q1 2017";;
        *a02082) RPImodel="3B (1.2)"; RPIman="Sony"; RPIrel="Q1 2016";;
        *a020a0) RPImodel="Compute Module 3"; RPIman="Sony"; RPIrel="Q1 2017";;
        *a22082) RPImodel="3B (1.2)"; RPIman="Embest"; RPIrel="Q1 2016";;
        *a32082) RPImodel="3B (1.2)"; RPIman="Sony"; RPIrel="Q4 2016";;
        *) RPImodel="'Unknown Version'"; RPIman="Unknown"; RPIrel="Unknown";;
    esac
  HWrelease="${RPIrel} (${RPIman})"
  else   # '/proc/cpuinfo' not found so RPI Model not known
    RPImodel="'Unknown Version'"
  fi
  OSversion=${SYSkernalVer%"-"*}
  HWdevice="Raspberry Pi ${RPImodel}"
  # MEMsize="${RPImem}"
  if [[ $(free 2> /dev/null) ]]; then
    MEMsize="$(free -m | awk '/^Mem:/{print $2}') MB"
    MEMusage=$(free -m | awk 'NR==2{printf "%s/%s MB (%d%%)\n", $3,$2,$3*100/$2 }')
  fi
  return 0
}

setLinux() {
  DeviceType="Linux"
  setLinuxCommon
  OSversion=${SYSkernalVer%%"-"*}
  HWdevice=""
  HWrelease=""
  if [ -e "/proc/cpuinfo" ]; then
    CPUname=$(grep -m1 'model name' < /proc/cpuinfo)
    CPUname=$(cleanCPUname "$CPUname")
  fi
  if [[ $(free 2> /dev/null) ]]; then
    MEMsizeMB=$(free -m | awk '/^Mem:/{print $2}')
      MEMsize=$(( MEMsizeMB / 925 ))
      MEMsize="${MEMsize} GB"
    MEMusage=$(free -m | awk 'NR==2{printf "%s/%s MB (%.0f%%)\n", $3,$2,$3*100/$2 }')
  fi
  return 0
}

setMac() {
  DeviceType="Mac"
  MacOSinitialVer=${SYSkernalVer%%.*}
  MacOSadjustedVer=$((MacOSinitialVer-4))
  MacOSsubVer=${SYSkernalVer%.*}
  MacOSsubVer=${MacOSsubVer#*.}
  MacOSmainVer="10.${MacOSadjustedVer}"
  OSversion="10.${MacOSadjustedVer}.${MacOSsubVer}"
  OSfullname="macOS ${MacOSmainVer}"
  case $MacOSmainVer in
    10.12) OScodename="Sierra";;
    10.11) OScodename="El Capitan";;
    10.10) OScodename="Yosemite";;
    10.9) OScodename="Mavericks";;
    10.8) OScodename="Mountain Lion";;
    10.7) OScodename="Lion";;
    10.6) OScodename="Snow Leopard";;
    10.5) OScodename="Leopard";;
    10.4) OScodename="Tiger";;
    10.3) OScodename="Panther";;
    10.2) OScodename="Jaguar";;
    10.1) OScodename="Puma";;
    10.0) OScodename="Cheetah";;
  esac
  HWdevice=${SYSplatform//,/.}
  HWrelease=""
  # Mac HW Quieries - 'sysctl -n' return value, 'sysctl -a | grep cpu'
  CPUname=$(sysctl -n machdep.cpu.brand_string)
  CPUname=$(cleanCPUname "$CPUname")
  CPUspeed=$(sysctl -n hw.cpufrequency_max)
    CPUspeed=$((CPUspeed / 1000000))
    CPUspeedBig=$((CPUspeed / 1000))
    CPUspeedSmall=$((CPUspeed % 1000))
    CPUspeed="${CPUspeedBig}.${CPUspeedSmall:0:1} GHz"
  CPUcores=$(sysctl -n hw.ncpu)
  MEMsizeMB=$(sysctl -n hw.memsize)
    MEMadjust=$(( 1024 * 1024 ))
    MEMsizeMB=$((MEMsizeMB / MEMadjust))    # Mem in MB
  MEMsize="$((MEMsizeMB / 1024)) GB"        # Mem in GB
  #  Memory used = App Use + Wired use + Compressed use
  MEMusedApps=$(vm_stat | grep 'active')
    MEMusedApps=$(cleanVARtext "$MEMusedApps")
    MEMusedApps=$((MEMusedApps / 256))
  MEMusedWired=$(vm_stat | grep 'wired')
    MEMusedWired=$(cleanVARtext "$MEMusedWired")
    MEMusedWired=$((MEMusedWired / 256))
  MEMusedComp=$(vm_stat | grep 'occupied by compressor')
    MEMusedComp=$(cleanVARtext "$MEMusedComp")
    MEMusedComp=$((MEMusedComp / 256))
  MEMused=$((MEMusedApps + MEMusedWired + MEMusedComp))
  MemRatio=$(( (MEMused * 100) / MEMsizeMB))
  printf -v MEMusage "%s/%s MB (%.0f%%)" ${MEMused} ${MEMsizeMB} ${MemRatio}
  DISKusage=$(df -h | awk '$NF=="/"{printf "%d/%d GB (%s)\n", $3,$2,$5}')
  return 0
}

printTitle () {
  display_ver
  echo -en "${CLRwhite}  -  ${REPORTTITLE}"
  case ${mode} in
    DEBUG) echo -en "  ${CLRheading2}(DEBUG)${CLRnormal}";;
    FORCE) echo -en "  ${CLRheading2}(FORCED 'UNKNOWN')${CLRnormal}";;
    NET)   echo -en "  ${CLRheading}(NETWORK)${CLRnormal}";;
    *)     ;;
  esac
  echo -e "\n"
  return 0
}

reportDebug() {
  printTitle
  echo -e "\t${CLRheading}BASH VARS"
  echo -e "\t${CLRtitle}HOST = \t\t${CLRwhite}${MACHINE_NAME}"
  echo -e "\t${CLRtitle}OS = \t\t${CLRwhite}${OS}"
  echo -e "\t${CLRtitle}OS-TYPE =\t${CLRwhite}${OSTYPE}${CLRnormal}\n"
  echo -e "\t${CLRheading}UNAME${CLRwhite}"
  echo -e "\t${CLRtitle}SYSkernal = \t${CLRwhite}${SYSkernal}"
  echo -e "\t${CLRtitle}SYSkernalVer = \t${CLRwhite}${SYSkernalVer}"
  echo -e "\t${CLRtitle}SYSmachine = \t${CLRwhite}${SYSmachine}"
  echo -e "\t${CLRtitle}SYSplatform = \t${CLRwhite}${SYSplatform}\n"
  if [[ "$LSBset" == "TRUE" ]]; then
    echo -e "\t${CLRheading}LSB_RELEASE${CLRwhite}"
    echo -e "\t${CLRtitle}LSBdescr = \t${CLRwhite}${LSBdescr}"
    echo -e "\t${CLRtitle}LSBid = \t${CLRwhite}${LSBid}"
    echo -e "\t${CLRtitle}LSBrel = \t${CLRwhite}${LSBrel}"
    echo -e "\t${CLRtitle}LSBcodename = \t${CLRwhite}${LSBcodename}${CLRnormal}\n"
  fi
  if [[ "$DeviceType" == "RPI" ]]; then
    echo -e "\t${CLRheading}RPI VARS"
    echo -e "\t${CLRtitle}RPi HW Rev =\t${CLRwhite}${RPIrev}"
    echo -e "\t${CLRtitle}RPi Model =\t${CLRwhite}${RPImodel}"
    echo -e "\t${CLRtitle}RPi Rel Date =\t${CLRwhite}${RPIrel}"
    echo -e "\t${CLRtitle}RPi Manuf =\t${CLRwhite}${RPIman}${CLRnormal}\n"
  elif [[ "$DeviceType" == "Mac" ]]; then
    echo -e "\t${CLRheading}MacOS VARS"
    echo -e "\t${CLRtitle}Raw Version = \t${CLRwhite}${MacOSinitialVer}"
    echo -e "\t${CLRtitle}Adj Version = \t${CLRwhite}${MacOSadjustedVer}"
    echo -e "\t${CLRtitle}MacOS Ver = \t${CLRwhite}${MacOSmainVer}"
    echo -e "\t${CLRtitle}MacOS sub V = \t${CLRwhite}${MacOSsubVer}${CLRnormal}\n"
  fi
  return 0
}

reportNetwork() {
  printTitle
  echo -e "\t${CLRheading}HOST\t\t${CLRheading2}${MACHINE_NAME}"
  [[ -n $SYSnode ]] && [[ "$SYSnode" != "$HOSTNAME" ]] && echo -e "\t${CLRheading}NODE\t\t${CLRheading2}${SYSnode}"
  if [[ $lanIP != "Unknown" ]]; then
    for (( i=0; i<count; i=i+1 )); do
      lanIP=${lanIPS[i]}
      echo -e "\t${CLRtitle}LAN IP \t\t${CLRwhite}${lanIP}"
    done
  fi
  [[ -n $pubIP ]] && echo -e "\t${CLRtitle}Internet IP \t${CLRwhite}${pubIP}${CLRnormal}\n"
  return 0
}

reportSystem() {
  echo -e "\t${CLRheading}OS\t\t${CLRheading2}${OSfullname}"
  [[ -n $OScodename ]] && echo -e "\t${CLRtitle}CODENAME\t${CLRwhite}${OScodename}"
  [[ -n $OSversion ]] && echo -e "\t${CLRtitle}OS VERSION\t${CLRwhite}${OSversion}"
  echo -e "\n\t${CLRheading}DEVICE\t\t${CLRheading2}${HWdevice}"
  [[ -n $HWrelease ]] && echo -e "\t${CLRtitle}RELEASE DATE\t${CLRwhite}${HWrelease}"
  [[ -n $CPUname ]] && echo -e "\t${CLRtitle}PROCESSOR\t${CLRwhite}${CPUname}"
  [[ -n $CPUspeed ]] && echo -e "\t${CLRtitle}CPU SPEED\t${CLRwhite}${CPUspeed}"
  [[ -n $CPUcores ]] && echo -e "\t${CLRtitle}CPU CORES\t${CLRwhite}${CPUcores}"
  [[ -n $MEMsize ]] && echo -e "\t${CLRtitle}MEMORY\t\t${CLRwhite}${MEMsize}"
  [[ -n $MEMusage ]] && echo -e "\t${CLRtitle}MEM USAGE\t${CLRwhite}${MEMusage}"
  [[ -n $DISKusage ]] && echo -e "\t${CLRtitle}DISK USAGE\t${CLRwhite}${DISKusage}$CLRnormal"
  echo
  return 0
}

reportMain() {
  reportNetwork
  if [[ -z "$DeviceType" ]] || [[ "$mode" == "FORCE" ]]; then
    # set VARS to rawest form
    OSversion=${SYSkernalVer}
    CPUname=${SYSmachine}
    [[ "$SYSplatform" != "unknown" ]] && HWdevice=${SYSplatform}
  fi
  reportSystem
  return 0
}


######################################################################
#     EXECUTION STARTS HERE
######################################################################

getCommandTail "$@"

getNetwork
[[ $mode == "NET" ]] && reportNetwork && processExit
getSystem

if [[ "$OS" == "Linux" ]]; then
  if ([[ "$PROCarch" == "armhf" ]] || [[ $SYSmachine == armv* ]] || [[ "$OSTYPE" == "linux-gnueabihf" ]]); then
    setRPI    # RPi unique extraction + some linux
  else
    setLinux  # pure Linux - standard linux info extraction
  fi
elif [[ "$OS" == "Darwin" ]]; then
  setMac      # Mac unique info extraction
else
  # un-determined host type
  processExit "${CLRerror}Error${CLRwhite}: ${CLRwarning}Could not determine System Type${CLRwhite}"
fi

[[ "$mode" == "DEBUG" ]] && reportDebug && processExit
reportMain

processExit

### SHOULD NEVER RUN CODE BELOW THIS LINE
echo "ERROR - exit function didnt work" >&2
exit 2
